N6XBasicChecker マニュアル
by eighttails
http://eighttails.seesaa.net

【 概要 】
N6XBasicCheckerは、PC-6001/6601シリーズ用のBASICリスト静的構文チェッカーです。
通常、BASICはインタプリタ言語であるため、シンタックスエラーはその打ち込みミスが
ある行を実行するまで発見できません。
つまり、プログラムに打ち間違いが無いことを保証するには、目視でくまなく確認するか、
すべての行を漏れなく実行するようカバレッジテストを行う必要があります。
これは、AVGやRPGなど、リストが長くプレイ時間が長いゲームでは大きな負担になります。
N6XBasicCheckerは、プログラムを実行せずにリスト全体をチェックして、打ち間違いを
見つけてくれるツールです。

【使い方】
このツールは、PC-6001の実機やエミュレーター上で動かすものではありません。
isioさん作の、「txt2bas」用に記述されたテキストファイルを、
Windows(またはLinux)上で解析します。

使い方は、コマンドライン上で
N6XBasicChecker (ファイル名)
と入力してください。

チェック対象のプログラムが、どのモードで動くのかを指定するスイッチはありません。
チェッカー内部の文法は、モード1〜6までのすべての命令を網羅した
スーパーセットになっています。
なので、モード1用のプログラムでＩＦ〜ＴＨＥＮ〜ＥＬＳＥとか書いても通ってしまいますが、
雑誌掲載のプログラムなら基本的にそういうことはないので、目をつぶってください。

エラーが見つからなかった場合、「Ok」とだけ表示されます。
エラーが見つかった場合、以下のようなメッセージが表示されます。
エラー:
テキスト行:8 BASIC行:80 シンタックスエラー[80 FORI=0TO10.....]
警告:
テキスト行:32 BASIC行:910 変数[R]はどこからも参照されていません
Ok

テキスト行とは、テキストファイル上の物理的な行番号です。
BASIC行とは、BASICリスト上の行番号です。
行の先頭が数字で始まっていない場合など、BASIC行番号が認識できなかった場合は
N/Aと表示されます。

時には「部分シンタックスエラー」というエラーが出る場合があります。
これはFOR〜NEXT文など、いくつかのブロックで構成されている文の場合、
分割して構文解析を行なっており、そこでエラーになった場合に出るエラーです。
基本的な対処法は通常のシンタックスエラーと変わりません。

エラーが出たらテキストエディタで修正して、またチェッカーにかけて、を
エラーが出なくなるまで繰り返します。

【今後の予定】
■予定していること（現時点で未実装なこと）
1）PLAY文、TALK文の構文チェック
　現在、PLAY文、TALK文の中身の構文はチェックしていません。
　将来のバージョンで対応する予定です。
　また、MMLは文字列変数やDATA文の形を取ることも多いので、
　任意の行の文字列リテラルをMMLとみなして構文解析する機能も付けたいと思っています。
2）GUI版
　これは先の話になりますが、GUI版を作りたいです。
　エラーの一覧がリストで表示され、ダブルクリックしたら任意のテキストエディタの当該行に
　タグジャンプするようなものを考えています。

■対応しないこと
1）値の範囲チェック
　例えばCONSOLE文の各パラメータの値の範囲は、BASICモード、SCREENモード、
　他のパラメータの値など、取りうる値を決めるための条件が複雑すぎるので、
　値の範囲チェックは行いません。
2）エラー位置の詳細な表示
　tst2basの入力ファイルはShift-JISで、全角文字が使える仕様ですが、
　構文解析器内部では前処理として、SJIS→UTF16変換、全角→半角変換を行なっており、
　エラーの出た箇所が元のファイルのどこに位置するのかを特定するのが困難です。
　また、エラーの出た箇所（構文解析器が手詰まりを起こした箇所）は
　必ずしも人間が打ち間違えた箇所とは一致しません。
　P6erなんだから、行番号だけ表示したら後は自分でチェックしてくれるでしょ？ｗ
3)エラー内容の詳細表示
　現状出るエラーはシンタックスエラーのみですが、P6ではこれ以外のエラーは
　基本的に実行時エラーなので、将来的にエラーの種類が増える見込みはあまり無いです。
　(バージョン1.1で、?UL Error相当のエラーには対応しました)
4）行の長さチェック
　1行の最大長はモードによって違うのと、前述の理由により行の長さの算出が困難なので、
　チェックをする予定はありません。

【更新履歴】
ver. 1.1　2012/08/11
機能追加
・警告の追加
　　エラーの他に「警告」というメッセージ種類を追加しました。
・変数の代入、参照チェック
　　例えば、S=STICK(0)という文を打ち間違えて、
　　S=STOCK(0)と打ち込んでしまった場合、これは数値型の配列変数として解釈され、エラーになりません。
　　今回のバージョンで、代入だけされて参照されていない変数、またはその逆を検出できるようにしました。
　　例外として、FOR文のループカウンタとしてしか使われていない変数は、どこからも参照されていなくても
　　警告を出しません。
　　USR()とRND()関数については、戻り値を受けるためのダミーの変数を用意するケースが多いですが、
　　現時点では、これらは全て警告が出ます。ご了承ください。
　　また、3文字以上の変数名で、2文字目までが一致しているものが複数ある場合、警告を出すようにしました。
・行番号の整合性チェックを追加(?UL Error相当エラーの検出)
・GOTO,GOSUBの後に余分な記述があった場合に警告を出すようにした。
　(実行時エラーにならないので、この挙動を利用してコメントなどを入れる人がいるが、
  GOTOの後のコロンが抜けた場合、次のステートメントが実行されない事態になるため)

バグ修正
・半角カナ記号の一部に対応していなかったのを修正。
・内部トレースが出力されることがあったのを修正。
・正常なIF文でエラーが出ることがあったのを修正。


ver. 1.01　2012/07/24
バグ修正
・内部文字コードをUTF-8からUTF-16に変更。
　(WindowsXPで、全角文字がリストに含まれているとエラーになるのを修正)
・ファイル名を複数指定するとクラッシュするのを修正。

ver. 1.0　2012/07/18
初版

【ライセンス、免責事項】
このプログラムのソースコード及びバイナリは無保証です。
このプログラムを使用したことによるいかなる損害も作者のeighttailsは責任を持ちません。
その点だけ了解していただければ、ソースコードは自由に使っていただいて構いません。
改造して他機種用のチェッカーを作ったり（他にテキストファイルが入力できるエミュレーターが
あるのかは知りませんが）、こいつを拡張してBASICコンパイラを作ったりしてもOKです。ていうか作って…。

【開発者情報】
本プログラムはgccまたはMinGWでのコンパイルを想定しています。
VisualC++でのコンパイル確認はしていません。
プログラム本体にはBOOSTライブラリを使用しています。
開発環境およびユニットテストにQtを使用していますが、プログラム本体は
Qtには依存していません。
以下にビルド手順を記します。

■Windows
・Qt SDKをダウンロードしてインストール
http://qt.nokia.com/downloads/sdk-windows-cpp

・MinGWをインストール
http://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/
ここから最新版のインストーラをダウンロードします。
（執筆時点ではmingw-get-inst-20120426）
インストーラーでは「C++ compiler」と「MSYS Basic Sytem」にチェックを入れます。
環境変数PATHにC:\MinGW\bin および C:\MinGW\msys\1.0\bin を追加します。

・BOOST　1.50をビルド、インストール
http://sourceforge.net/projects/boost/files/boost/1.50.0/boost_1_50_0.zip/download
ここからboost 1.50をダウンロードし、解凍します。
MinGW Shellから解凍したフォルダに移動し、
./bootstrap.sh --with-toolset=mingw
./b2 install --prefix=(任意のフォルダ)
でboostをビルド、インストールします。
ここでprefixに指定したフォルダを環境変数BOOSTDIRにセットします。
私はMSYS配下にライブラリを置きたくなかったのでこうしていますが、
MSYS以下に置いて使いたい人は、prefixや環境変数も不要だと思います。多分。

・N6XBasicCheckerのビルド
N6XBasicCheckerのソースを解凍して、N6XBasicChecker.proをQt Creatorで開きます。
「プロジェクト」モードの概要−ツールチェインをMinGW(32bit)に変更します。
これでコンパイラをQt付属のものではなく、先ほどインストールしたMinGWのものに変更します。
後は普通にビルドすればOKです。

■Linux
2012年7月時点でのDebian sidでの手順です。
rootで
apt-get install qtcreator libboost-dev
を実行し、開発環境をインストールします。
N6XBasicCheckerのソースを解凍して、N6XBasicChecker.proをQt Creatorで開きます。
後は普通にビルドすればOKです。

【謝辞】
文字コードの変換には、道化師様のBABELというライブラリを使わせていただきました。
この場を借りてお礼申し上げます。
http://tricklib.com/cxx/ex/babel/
その他、P6のBASICマニュアルに載ってない仕様についてご教示くださったP6erの皆様にも
お礼申し上げます。